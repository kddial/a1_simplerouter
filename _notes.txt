
                                         Application Server 1
                                        +====================+
                                        |                    |
                                        |   192.168.2.2      |
                                        |                    |
                                        +====================+
                                                /
                                               /
                                              /
                    eth3:                    /
                   10.0.1.1                /     eth1: 192.168.2.1
                           +============(eth1)==+
                           |                    |
    client =============(eth3)  Your Router     |
   10.0.1.100              |                    |
                           +============(eth2)==+
                                            \    eth2: 172.64.3.1
                                             \
                                              \
                                               \
                                        +====================+
                                        |                    |
                                        |  172.64.3.10       |
                                        |                    |
                                        +====================+
                                         Application Server 2

> cat ~/cs144_lab3/IP_CONFIG
server1 192.168.2.2
server2 172.64.3.10
client    10.0.1.100
sw0-eth1 192.168.2.1
sw0-eth2 172.64.3.1
sw0-eth3 10.0.1.1

> cat ~/cs144_lab3/rtable

Network Destination		Gateway			Netmask/Genmask		Interface/iface
10.0.1.100 			 	10.0.1.100  	255.255.255.255 	eth3  (10.0.1.1)
192.168.2.2 			192.168.2.2 	255.255.255.255		eth1  (192.168.2.1)
172.64.3.10  			172.64.3.10  	255.255.255.255 	eth2  (172.64.3.1)


two parts:
	ip forwarding
	handling ARP (address resolution)

files:
sr_router.h
sr_util.c
sr_util.h
sr_arpcache.h


TTL 
	- time to live
	- counter that is decremented to prevent looping
	- if TTL = 0, the packet is discarded

Hop
	- hops are number of jumps through interfaces during the path of a data packet

ICMP
	- internet control message protocol
	- used for ping and traceroute

UDP
	- user datagram protocol

TCP 
	- transmission control protocol

ARP
	- address resolution protocol
	- ip to MAC



IP forwarding:
	given an IP packet that is not destined for one of our interfaces:
		- sanity check the packet
			- greater than min length
			- correct checksum
		- decrement the TTL (modify header)
		- recompute the checksum (with new header)
		- match packet destination IP address with the longest prefix match in routing table
		- check ARP cache for the next-hop MAC address corresponding to the next-hop IP.
			- how do i find the next-hop IP??
		- if MAC address is found, send the packet to it
		- if a new ARP hasn't been recieved within the last 1 second
			- send an ARP requiest for the next-hop IP
			- add the packet to the queue (queue consists of packets waiting for ARP requests)
	
		* if an error occurs anywhere above, send an ICMP message back to the sender notifying them of an error

ARP
	- cached ARP entries times out after 15 seconds

----------------------------------------





protocol encapsulation:


Application layer:			[SSH, FTP, HTTP]   [DNS, HALO]       [traceroute]
Transport layer: 			[     TCP      ]   [   UDP   ]         v^
Network layer:				[          IP                ]  <->  [ ICMP ] 
Link layer:					[    ARP, device drivers     ]
Physical layer: 			[ copper, optical, radio waves ] 



- Receive an IP packet from transport layer
- Convert to ARP on link layer
- Send to physical layer


handle packets:
	- if IP packet
		- means its to an application or server

	- if ARP packet
		- means its to an router interface


// TO DOOD
- sr_handlepacket
- handle_arpreq
- sr_arpcache_sweepreqs


____________



sr_handlepacket(uint8_t* p = packet,char* interface)

	if  packet length < sizeof Ethernet:
		return error;
	if getInterface (input) == NULL (misc. error checking):
		return error;

	do endianess operations

	if packet == type ARP  // (ethertype(packet) == ethertype_arp):
		- make function to handle received ARP PACKETS:
			- error check for arp packet size, and other misc;

			- if packet->ops == request {arp_op_request}:
				- log msg "ARP request recieved. sending ARP reply."
				- create a reply using malloc and mencpy
				- | ethernet header | ARP header | 
				- this packet does not require app data
				- send the packet (sr_send_packet)
				- free reply packet

			- if packet->ops == reply {arp_op_reply}:
				- if packet target ip == interface ip:
					- insert into arp_cache; set return to 'requestPointer'
					- while (requestPointer->packets != null)
						- memcpy ethernet header
						- send packet
						- increment list of packet (requestPointer->packets->next;)
						- free current packet, interface, pointer;
					- while end
					- destroy arp request
			- if else
				- log "receieved ARP reply, but no request"
	if end
	if packet == type IP (ethertype_ip)
		- make function to handle received IP PACKETS:
			- error check on sizeof IP packet size;
			- confirm IP packet's checksum

			- if (network destination is us):
				// handle icmp packet (MAKE new function)
					- confrim ICMP header checksum

					- if (icmp type == echo request)
						- contruct reply packet
						- copy ip header fields
						- copy icmp fields
						- copy old payload into the new one
						- update checksum
						- send packet WITH arp headers.
			- else
				// IP FORWARDING, ignore until ping begins to work.
	if end
sr_handlepacket end










commands to run
_______________

./run_mininet.sh
./run_pox.sh

make
./sr

mininet> 
client ping -c 3 192.168.2.2
client ping -c 1 172.64.3.1

results on router:
	PING 192.168.2.2 (192.168.2.2) 56(84) bytes of data.
	64 bytes from 192.168.2.2: icmp_req=1 ttl=63 time=66.9 ms
	64 bytes from 192.168.2.2: icmp_req=2 ttl=63 time=49.9 ms
	64 bytes from 192.168.2.2: icmp_req=3 ttl=63 time=68.8 ms



log packets:
./sr -l log1.pcap

ssh -X -p 8022 mininet@localhost







Expected output from router3:
---------------------------------------------
Router interfaces:
eth3	HWaddre6:52:7e:62:42:c2
	inet addr 10.0.1.1
eth2	HWaddr3e:99:eb:c6:fc:61
	inet addr 172.64.3.1
eth1	HWaddr9e:da:ae:57:ad:bb
	inet addr 192.168.2.1
 <-- Ready to process packets --> 
--------- 1000 HANDLE PACKET begin ---------
ETHERNET header:
	destination: FF:FF:FF:FF:FF:FF
	source: 82:9D:C1:A3:4E:A1
	type: 2054
ARP header
	hardware type: 1
	protocol type: 2048
	hardware address length: 6
	protocol address length: 4
	opcode: 1
	sender hardware address: 82:9D:C1:A3:4E:A1
	sender ip address: 10.0.1.100
	target hardware address: 00:00:00:00:00:00
	target ip address: 10.0.1.1
Received ARP request. Sending ARP reply.
--------- 1000 HANDLE PACKET begin ---------
ETHERNET header:
	destination: E6:52:7E:62:42:C2
	source: 82:9D:C1:A3:4E:A1
	type: 2048
IP header:
	version: 4
	header length: 5
	type of service: 0
	length: 84
	id: 59342
	fragment flag: DF
	fragment offset: 0
	TTL: 64
	protocol: 1
	checksum: 13720
	source: 10.0.1.100
	destination: 172.64.3.1
ICMP header:
	type: 8
	code: 0
	checksum: 3622
Received ICMP echo request packet. Sending ICMP echo reply.
ARPing 10.0.1.100 on eth3
ARPing 10.0.1.100 on eth3
--------- 1000 HANDLE PACKET begin ---------
ETHERNET header:
	destination: E6:52:7E:62:42:C2
	source: 82:9D:C1:A3:4E:A1
	type: 2054
ARP header
	hardware type: 1
	protocol type: 2048
	hardware address length: 6
	protocol address length: 4
	opcode: 2
	sender hardware address: 82:9D:C1:A3:4E:A1
	sender ip address: 10.0.1.100
	target hardware address: E6:52:7E:62:42:C2
	target ip address: 10.0.1.1
-------------------- ARP CAHCE 900 --------------------
Received ARP reply, sending all queued packets.
--------- 1000 HANDLE PACKET begin ---------
ETHERNET header:
	destination: E6:52:7E:62:42:C2
	source: 82:9D:C1:A3:4E:A1
	type: 2054
ARP header
	hardware type: 1
	protocol type: 2048
	hardware address length: 6
	protocol address length: 4
	opcode: 2
	sender hardware address: 82:9D:C1:A3:4E:A1
	sender ip address: 10.0.1.100
	target hardware address: E6:52:7E:62:42:C2
	target ip address: 10.0.1.1
-------------------- ARP CAHCE 900 --------------------
Received ARP reply, but found no request.










































